//Package LifeService comment
// This file war generated by tars2go 1.1
// Generated from DataService.tars
package LifeService

import (
	"context"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

//DataService struct
type DataService struct {
	s m.Servant
}

//HasUser is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) HasUser(Wx_id string, UserExist *bool, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "hasUser", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_bool(&(*UserExist), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//HasUserWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) HasUserWithContext(ctx context.Context, Wx_id string, UserExist *bool, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "hasUser", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_bool(&(*UserExist), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//HasPhone is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) HasPhone(Phone string, PhoneExist *bool, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Phone, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "hasPhone", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_bool(&(*PhoneExist), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//HasPhoneWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) HasPhoneWithContext(ctx context.Context, Phone string, PhoneExist *bool, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Phone, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "hasPhone", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_bool(&(*PhoneExist), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateUser is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateUser(Wx_id string, UserInfo *UserInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = UserInfo.WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "createUser", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateUserWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateUserWithContext(ctx context.Context, Wx_id string, UserInfo *UserInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = UserInfo.WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "createUser", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetUserInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetUserInfo(Wx_id string, UserInfo *UserInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getUserInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*UserInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetUserInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetUserInfoWithContext(ctx context.Context, Wx_id string, UserInfo *UserInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getUserInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*UserInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetGroupInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetGroupInfo(GroupInfo *map[int32]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getGroupInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have = _is.SkipTo(codec.MAP, 1, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return ret, err
	}
	(*GroupInfo) = make(map[int32]string)
	for i0, e0 := int32(0), length; i0 < e0; i0++ {
		var k0 int32
		var v0 string

		err = _is.Read_int32(&k0, 0, false)
		if err != nil {
			return ret, err
		}

		err = _is.Read_string(&v0, 1, false)
		if err != nil {
			return ret, err
		}

		(*GroupInfo)[k0] = v0
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetGroupInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetGroupInfoWithContext(ctx context.Context, GroupInfo *map[int32]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getGroupInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have = _is.SkipTo(codec.MAP, 1, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return ret, err
	}
	(*GroupInfo) = make(map[int32]string)
	for i1, e1 := int32(0), length; i1 < e1; i1++ {
		var k1 int32
		var v1 string

		err = _is.Read_int32(&k1, 0, false)
		if err != nil {
			return ret, err
		}

		err = _is.Read_string(&v1, 1, false)
		if err != nil {
			return ret, err
		}

		(*GroupInfo)[k1] = v1
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClubManager is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateClubManager(Wx_id string, Club_id string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "createClubManager", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClubManagerWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateClubManagerWithContext(ctx context.Context, Wx_id string, Club_id string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "createClubManager", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClub is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateClub(ClubInfo *ClubInfo, Club_id *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ClubInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "createClub", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Club_id), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClubWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateClubWithContext(ctx context.Context, ClubInfo *ClubInfo, Club_id *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ClubInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "createClub", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Club_id), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetClubList is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetClubList(Index int32, Batch int32, Wx_id string, NextIndex *int32, ClubInfoList *[]ClubInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = (*ClubInfoList)[i2].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetClubListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetClubListWithContext(ctx context.Context, Index int32, Batch int32, Wx_id string, NextIndex *int32, ClubInfoList *[]ClubInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = (*ClubInfoList)[i3].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetManagerClubList is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetManagerClubList(Index int32, Batch int32, Wx_id string, NextIndex *int32, ClubInfoList *[]ClubInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getManagerClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err = (*ClubInfoList)[i4].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetManagerClubListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetManagerClubListWithContext(ctx context.Context, Index int32, Batch int32, Wx_id string, NextIndex *int32, ClubInfoList *[]ClubInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getManagerClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i5, e5 := int32(0), length; i5 < e5; i5++ {

			err = (*ClubInfoList)[i5].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateApply is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateApply(Wx_id string, Club_id string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "createApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateApplyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateApplyWithContext(ctx context.Context, Wx_id string, Club_id string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "createApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetApplyListByClubId is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetApplyListByClubId(Club_id string, Index int32, Batch int32, Apply_status int32, NextIndex *int32, ApplyList *[]ApplyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Club_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Index, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Apply_status, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getApplyListByClubId", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 5, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(6, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ApplyList) = make([]ApplyInfo, length, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = (*ApplyList)[i6].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetApplyListByClubIdWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetApplyListByClubIdWithContext(ctx context.Context, Club_id string, Index int32, Batch int32, Apply_status int32, NextIndex *int32, ApplyList *[]ApplyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Club_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Index, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Apply_status, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getApplyListByClubId", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 5, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(6, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ApplyList) = make([]ApplyInfo, length, length)
		for i7, e7 := int32(0), length; i7 < e7; i7++ {

			err = (*ApplyList)[i7].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetApplyListByUserId is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetApplyListByUserId(Wx_id string, Index int32, Batch int32, Apply_status int32, NextIndex *int32, ApplyList *[]ApplyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Index, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Apply_status, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getApplyListByUserId", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 5, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(6, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ApplyList) = make([]ApplyInfo, length, length)
		for i8, e8 := int32(0), length; i8 < e8; i8++ {

			err = (*ApplyList)[i8].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetApplyListByUserIdWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetApplyListByUserIdWithContext(ctx context.Context, Wx_id string, Index int32, Batch int32, Apply_status int32, NextIndex *int32, ApplyList *[]ApplyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Index, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Apply_status, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getApplyListByUserId", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 5, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(6, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ApplyList) = make([]ApplyInfo, length, length)
		for i9, e9 := int32(0), length; i9 < e9; i9++ {

			err = (*ApplyList)[i9].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetApplyStatus is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) SetApplyStatus(Wx_id string, Club_id string, Apply_status int32, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Apply_status, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "setApplyStatus", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 4, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetApplyStatusWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) SetApplyStatusWithContext(ctx context.Context, Wx_id string, Club_id string, Apply_status int32, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Apply_status, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "setApplyStatus", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 4, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteApply is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) DeleteApply(Wx_id string, Club_id string, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "deleteApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteApplyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) DeleteApplyWithContext(ctx context.Context, Wx_id string, Club_id string, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "deleteApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateActivity is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateActivity(ActivityInfo *ActivityInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ActivityInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "createActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateActivityWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateActivityWithContext(ctx context.Context, ActivityInfo *ActivityInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ActivityInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "createActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityList is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetActivityList(Index int32, Batch int32, Wx_id string, Club_id string, NextIndex *int32, ActivityList *[]map[string]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getActivityList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 5, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(6, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActivityList) = make([]map[string]string, length, length)
		for i10, e10 := int32(0), length; i10 < e10; i10++ {

			err, have = _is.SkipTo(codec.MAP, 0, false)
			if err != nil {
				return ret, err
			}
			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return ret, err
				}
				(*ActivityList)[i10] = make(map[string]string)
				for i11, e11 := int32(0), length; i11 < e11; i11++ {
					var k11 string
					var v11 string

					err = _is.Read_string(&k11, 0, false)
					if err != nil {
						return ret, err
					}

					err = _is.Read_string(&v11, 1, false)
					if err != nil {
						return ret, err
					}

					(*ActivityList)[i10][k11] = v11
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetActivityListWithContext(ctx context.Context, Index int32, Batch int32, Wx_id string, Club_id string, NextIndex *int32, ActivityList *[]map[string]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Club_id, 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getActivityList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 5, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(6, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActivityList) = make([]map[string]string, length, length)
		for i12, e12 := int32(0), length; i12 < e12; i12++ {

			err, have = _is.SkipTo(codec.MAP, 0, false)
			if err != nil {
				return ret, err
			}
			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return ret, err
				}
				(*ActivityList)[i12] = make(map[string]string)
				for i13, e13 := int32(0), length; i13 < e13; i13++ {
					var k13 string
					var v13 string

					err = _is.Read_string(&k13, 0, false)
					if err != nil {
						return ret, err
					}

					err = _is.Read_string(&v13, 1, false)
					if err != nil {
						return ret, err
					}

					(*ActivityList)[i12][k13] = v13
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateActivity is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) UpdateActivity(ActivityIndo *ActivityInfo, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ActivityIndo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "updateActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateActivityWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) UpdateActivityWithContext(ctx context.Context, ActivityIndo *ActivityInfo, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ActivityIndo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "updateActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteActivity is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) DeleteActivity(Activity_id string, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Activity_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "deleteActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteActivityWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) DeleteActivityWithContext(ctx context.Context, Activity_id string, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Activity_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "deleteActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetActivityInfo(Activity_id string, ActivityInfo *ActivityInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Activity_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getActivityInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*ActivityInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetActivityInfoWithContext(ctx context.Context, Activity_id string, ActivityInfo *ActivityInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Activity_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getActivityInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*ActivityInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateActivityRecord is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateActivityRecord(Wx_id string, Activity_id string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Activity_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "createActivityRecord", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateActivityRecordWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateActivityRecordWithContext(ctx context.Context, Wx_id string, Activity_id string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Activity_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "createActivityRecord", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityRecords is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetActivityRecords(Index int32, Batch int32, Activity_id string, NextIndex *int32, RecordList *[]ActivityRecord, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Activity_id, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getActivityRecords", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*RecordList) = make([]ActivityRecord, length, length)
		for i14, e14 := int32(0), length; i14 < e14; i14++ {

			err = (*RecordList)[i14].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityRecordsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetActivityRecordsWithContext(ctx context.Context, Index int32, Batch int32, Activity_id string, NextIndex *int32, RecordList *[]ActivityRecord, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Batch, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Activity_id, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getActivityRecords", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*RecordList) = make([]ActivityRecord, length, length)
		for i15, e15 := int32(0), length; i15 < e15; i15++ {

			err = (*RecordList)[i15].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteActivityRecord is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) DeleteActivityRecord(Activity_id string, Wx_id string, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Activity_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "deleteActivityRecord", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteActivityRecordWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) DeleteActivityRecordWithContext(ctx context.Context, Activity_id string, Wx_id string, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Activity_id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "deleteActivityRecord", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InsertMessage is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) InsertMessage(Msg *Message, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Msg.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "insertMessage", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InsertMessageWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) InsertMessageWithContext(ctx context.Context, Msg *Message, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Msg.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "insertMessage", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetMsgList is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetMsgList(Index int32, Date string, Wx_id string, NextIndex *int32, MsgList *[]Message, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Date, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getMsgList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*MsgList) = make([]Message, length, length)
		for i16, e16 := int32(0), length; i16 < e16; i16++ {

			err = (*MsgList)[i16].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetMsgListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetMsgListWithContext(ctx context.Context, Index int32, Date string, Wx_id string, NextIndex *int32, MsgList *[]Message, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Date, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(Wx_id, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getMsgList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*MsgList) = make([]Message, length, length)
		for i17, e17 := int32(0), length; i17 < e17; i17++ {

			err = (*MsgList)[i17].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//AddLike is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) AddLike(Message_id string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Message_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "addLike", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//AddLikeWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) AddLikeWithContext(ctx context.Context, Message_id string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Message_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "addLike", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetLike is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetLike(Message_id string, Like_count *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Message_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getLike", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Like_count), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetLikeWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetLikeWithContext(ctx context.Context, Message_id string, Like_count *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Message_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getLike", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Like_count), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InsertData is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) InsertData(STableName string, SColumns []Column, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SColumns)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range SColumns {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "insertData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InsertDataWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) InsertDataWithContext(ctx context.Context, STableName string, SColumns []Column, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SColumns)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range SColumns {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "insertData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryData is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) QueryData(STableName string, SColumns []string, SCondition string, SRsp *[]map[string]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SColumns)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range SColumns {

		err = _os.Write_string(v, 0)
		if err != nil {
			return ret, err
		}
	}

	err = _os.Write_string(SCondition, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "queryData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*SRsp) = make([]map[string]string, length, length)
		for i18, e18 := int32(0), length; i18 < e18; i18++ {

			err, have = _is.SkipTo(codec.MAP, 0, false)
			if err != nil {
				return ret, err
			}
			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return ret, err
				}
				(*SRsp)[i18] = make(map[string]string)
				for i19, e19 := int32(0), length; i19 < e19; i19++ {
					var k19 string
					var v19 string

					err = _is.Read_string(&k19, 0, false)
					if err != nil {
						return ret, err
					}

					err = _is.Read_string(&v19, 1, false)
					if err != nil {
						return ret, err
					}

					(*SRsp)[i18][k19] = v19
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDataWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) QueryDataWithContext(ctx context.Context, STableName string, SColumns []string, SCondition string, SRsp *[]map[string]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SColumns)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range SColumns {

		err = _os.Write_string(v, 0)
		if err != nil {
			return ret, err
		}
	}

	err = _os.Write_string(SCondition, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "queryData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*SRsp) = make([]map[string]string, length, length)
		for i20, e20 := int32(0), length; i20 < e20; i20++ {

			err, have = _is.SkipTo(codec.MAP, 0, false)
			if err != nil {
				return ret, err
			}
			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return ret, err
				}
				(*SRsp)[i20] = make(map[string]string)
				for i21, e21 := int32(0), length; i21 < e21; i21++ {
					var k21 string
					var v21 string

					err = _is.Read_string(&k21, 0, false)
					if err != nil {
						return ret, err
					}

					err = _is.Read_string(&v21, 1, false)
					if err != nil {
						return ret, err
					}

					(*SRsp)[i20][k21] = v21
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetRecordCount is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetRecordCount(STableName string, SCondition string, ICount *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SCondition, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getRecordCount", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*ICount), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetRecordCountWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetRecordCountWithContext(ctx context.Context, STableName string, SCondition string, ICount *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SCondition, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getRecordCount", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*ICount), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *DataService) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *DataService) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}
func (_obj *DataService) setMap(l int, res *requestf.ResponsePacket, ctx map[string]string, sts map[string]string) {
	if l == 1 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
	} else if l == 2 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
		for k, _ := range sts {
			delete(sts, k)
		}
		for k, v := range res.Status {
			sts[k] = v
		}
	}
}

//AddServant adds servant  for the service.
func (_obj *DataService) AddServant(imp _impDataService, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *DataService) AddServantWithContext(imp _impDataServiceWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impDataService interface {
	HasUser(Wx_id string, UserExist *bool) (ret int32, err error)
	HasPhone(Phone string, PhoneExist *bool) (ret int32, err error)
	CreateUser(Wx_id string, UserInfo *UserInfo) (ret int32, err error)
	GetUserInfo(Wx_id string, UserInfo *UserInfo) (ret int32, err error)
	GetGroupInfo(GroupInfo *map[int32]string) (ret int32, err error)
	CreateClubManager(Wx_id string, Club_id string) (ret int32, err error)
	CreateClub(ClubInfo *ClubInfo, Club_id *string) (ret int32, err error)
	GetClubList(Index int32, Batch int32, Wx_id string, NextIndex *int32, ClubInfoList *[]ClubInfo) (ret int32, err error)
	GetManagerClubList(Index int32, Batch int32, Wx_id string, NextIndex *int32, ClubInfoList *[]ClubInfo) (ret int32, err error)
	CreateApply(Wx_id string, Club_id string) (ret int32, err error)
	GetApplyListByClubId(Club_id string, Index int32, Batch int32, Apply_status int32, NextIndex *int32, ApplyList *[]ApplyInfo) (ret int32, err error)
	GetApplyListByUserId(Wx_id string, Index int32, Batch int32, Apply_status int32, NextIndex *int32, ApplyList *[]ApplyInfo) (ret int32, err error)
	SetApplyStatus(Wx_id string, Club_id string, Apply_status int32, IRetCode *int32) (ret int32, err error)
	DeleteApply(Wx_id string, Club_id string, IRetCode *int32) (ret int32, err error)
	CreateActivity(ActivityInfo *ActivityInfo) (ret int32, err error)
	GetActivityList(Index int32, Batch int32, Wx_id string, Club_id string, NextIndex *int32, ActivityList *[]map[string]string) (ret int32, err error)
	UpdateActivity(ActivityIndo *ActivityInfo, IRetCode *int32) (ret int32, err error)
	DeleteActivity(Activity_id string, IRetCode *int32) (ret int32, err error)
	GetActivityInfo(Activity_id string, ActivityInfo *ActivityInfo) (ret int32, err error)
	CreateActivityRecord(Wx_id string, Activity_id string) (ret int32, err error)
	GetActivityRecords(Index int32, Batch int32, Activity_id string, NextIndex *int32, RecordList *[]ActivityRecord) (ret int32, err error)
	DeleteActivityRecord(Activity_id string, Wx_id string, IRetCode *int32) (ret int32, err error)
	InsertMessage(Msg *Message) (ret int32, err error)
	GetMsgList(Index int32, Date string, Wx_id string, NextIndex *int32, MsgList *[]Message) (ret int32, err error)
	AddLike(Message_id string) (ret int32, err error)
	GetLike(Message_id string, Like_count *int32) (ret int32, err error)
	InsertData(STableName string, SColumns []Column) (ret int32, err error)
	QueryData(STableName string, SColumns []string, SCondition string, SRsp *[]map[string]string) (ret int32, err error)
	GetRecordCount(STableName string, SCondition string, ICount *int32) (ret int32, err error)
}
type _impDataServiceWithContext interface {
	HasUser(ctx context.Context, Wx_id string, UserExist *bool) (ret int32, err error)
	HasPhone(ctx context.Context, Phone string, PhoneExist *bool) (ret int32, err error)
	CreateUser(ctx context.Context, Wx_id string, UserInfo *UserInfo) (ret int32, err error)
	GetUserInfo(ctx context.Context, Wx_id string, UserInfo *UserInfo) (ret int32, err error)
	GetGroupInfo(ctx context.Context, GroupInfo *map[int32]string) (ret int32, err error)
	CreateClubManager(ctx context.Context, Wx_id string, Club_id string) (ret int32, err error)
	CreateClub(ctx context.Context, ClubInfo *ClubInfo, Club_id *string) (ret int32, err error)
	GetClubList(ctx context.Context, Index int32, Batch int32, Wx_id string, NextIndex *int32, ClubInfoList *[]ClubInfo) (ret int32, err error)
	GetManagerClubList(ctx context.Context, Index int32, Batch int32, Wx_id string, NextIndex *int32, ClubInfoList *[]ClubInfo) (ret int32, err error)
	CreateApply(ctx context.Context, Wx_id string, Club_id string) (ret int32, err error)
	GetApplyListByClubId(ctx context.Context, Club_id string, Index int32, Batch int32, Apply_status int32, NextIndex *int32, ApplyList *[]ApplyInfo) (ret int32, err error)
	GetApplyListByUserId(ctx context.Context, Wx_id string, Index int32, Batch int32, Apply_status int32, NextIndex *int32, ApplyList *[]ApplyInfo) (ret int32, err error)
	SetApplyStatus(ctx context.Context, Wx_id string, Club_id string, Apply_status int32, IRetCode *int32) (ret int32, err error)
	DeleteApply(ctx context.Context, Wx_id string, Club_id string, IRetCode *int32) (ret int32, err error)
	CreateActivity(ctx context.Context, ActivityInfo *ActivityInfo) (ret int32, err error)
	GetActivityList(ctx context.Context, Index int32, Batch int32, Wx_id string, Club_id string, NextIndex *int32, ActivityList *[]map[string]string) (ret int32, err error)
	UpdateActivity(ctx context.Context, ActivityIndo *ActivityInfo, IRetCode *int32) (ret int32, err error)
	DeleteActivity(ctx context.Context, Activity_id string, IRetCode *int32) (ret int32, err error)
	GetActivityInfo(ctx context.Context, Activity_id string, ActivityInfo *ActivityInfo) (ret int32, err error)
	CreateActivityRecord(ctx context.Context, Wx_id string, Activity_id string) (ret int32, err error)
	GetActivityRecords(ctx context.Context, Index int32, Batch int32, Activity_id string, NextIndex *int32, RecordList *[]ActivityRecord) (ret int32, err error)
	DeleteActivityRecord(ctx context.Context, Activity_id string, Wx_id string, IRetCode *int32) (ret int32, err error)
	InsertMessage(ctx context.Context, Msg *Message) (ret int32, err error)
	GetMsgList(ctx context.Context, Index int32, Date string, Wx_id string, NextIndex *int32, MsgList *[]Message) (ret int32, err error)
	AddLike(ctx context.Context, Message_id string) (ret int32, err error)
	GetLike(ctx context.Context, Message_id string, Like_count *int32) (ret int32, err error)
	InsertData(ctx context.Context, STableName string, SColumns []Column) (ret int32, err error)
	QueryData(ctx context.Context, STableName string, SColumns []string, SCondition string, SRsp *[]map[string]string) (ret int32, err error)
	GetRecordCount(ctx context.Context, STableName string, SCondition string, ICount *int32) (ret int32, err error)
}

func hasUser(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var UserExist bool
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.HasUser(Wx_id, &UserExist)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.HasUser(ctx, Wx_id, &UserExist)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_bool(UserExist, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func hasPhone(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Phone string
	err = _is.Read_string(&Phone, 1, true)
	if err != nil {
		return err
	}
	var PhoneExist bool
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.HasPhone(Phone, &PhoneExist)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.HasPhone(ctx, Phone, &PhoneExist)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_bool(PhoneExist, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func createUser(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var UserInfo UserInfo
	err = UserInfo.ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.CreateUser(Wx_id, &UserInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.CreateUser(ctx, Wx_id, &UserInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getUserInfo(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var UserInfo UserInfo
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetUserInfo(Wx_id, &UserInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetUserInfo(ctx, Wx_id, &UserInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = UserInfo.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getGroupInfo(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var GroupInfo map[int32]string
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetGroupInfo(&GroupInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetGroupInfo(ctx, &GroupInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(GroupInfo)), 0)
	if err != nil {
		return err
	}
	for k22, v22 := range GroupInfo {

		err = _os.Write_int32(k22, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v22, 1)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func createClubManager(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var Club_id string
	err = _is.Read_string(&Club_id, 2, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.CreateClubManager(Wx_id, Club_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.CreateClubManager(ctx, Wx_id, Club_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func createClub(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ClubInfo ClubInfo
	err = ClubInfo.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	var Club_id string
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.CreateClub(&ClubInfo, &Club_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.CreateClub(ctx, &ClubInfo, &Club_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_string(Club_id, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getClubList(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var Batch int32
	err = _is.Read_int32(&Batch, 2, true)
	if err != nil {
		return err
	}
	var Wx_id string
	err = _is.Read_string(&Wx_id, 3, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ClubInfoList []ClubInfo
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetClubList(Index, Batch, Wx_id, &NextIndex, &ClubInfoList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetClubList(ctx, Index, Batch, Wx_id, &NextIndex, &ClubInfoList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ClubInfoList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ClubInfoList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getManagerClubList(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var Batch int32
	err = _is.Read_int32(&Batch, 2, true)
	if err != nil {
		return err
	}
	var Wx_id string
	err = _is.Read_string(&Wx_id, 3, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ClubInfoList []ClubInfo
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetManagerClubList(Index, Batch, Wx_id, &NextIndex, &ClubInfoList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetManagerClubList(ctx, Index, Batch, Wx_id, &NextIndex, &ClubInfoList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ClubInfoList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ClubInfoList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func createApply(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var Club_id string
	err = _is.Read_string(&Club_id, 2, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.CreateApply(Wx_id, Club_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.CreateApply(ctx, Wx_id, Club_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getApplyListByClubId(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Club_id string
	err = _is.Read_string(&Club_id, 1, true)
	if err != nil {
		return err
	}
	var Index int32
	err = _is.Read_int32(&Index, 2, true)
	if err != nil {
		return err
	}
	var Batch int32
	err = _is.Read_int32(&Batch, 3, true)
	if err != nil {
		return err
	}
	var Apply_status int32
	err = _is.Read_int32(&Apply_status, 4, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ApplyList []ApplyInfo
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetApplyListByClubId(Club_id, Index, Batch, Apply_status, &NextIndex, &ApplyList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetApplyListByClubId(ctx, Club_id, Index, Batch, Apply_status, &NextIndex, &ApplyList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 5)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 6)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ApplyList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ApplyList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getApplyListByUserId(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var Index int32
	err = _is.Read_int32(&Index, 2, true)
	if err != nil {
		return err
	}
	var Batch int32
	err = _is.Read_int32(&Batch, 3, true)
	if err != nil {
		return err
	}
	var Apply_status int32
	err = _is.Read_int32(&Apply_status, 4, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ApplyList []ApplyInfo
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetApplyListByUserId(Wx_id, Index, Batch, Apply_status, &NextIndex, &ApplyList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetApplyListByUserId(ctx, Wx_id, Index, Batch, Apply_status, &NextIndex, &ApplyList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 5)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 6)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ApplyList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ApplyList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func setApplyStatus(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var Club_id string
	err = _is.Read_string(&Club_id, 2, true)
	if err != nil {
		return err
	}
	var Apply_status int32
	err = _is.Read_int32(&Apply_status, 3, true)
	if err != nil {
		return err
	}
	var IRetCode int32
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.SetApplyStatus(Wx_id, Club_id, Apply_status, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.SetApplyStatus(ctx, Wx_id, Club_id, Apply_status, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(IRetCode, 4)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func deleteApply(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var Club_id string
	err = _is.Read_string(&Club_id, 2, true)
	if err != nil {
		return err
	}
	var IRetCode int32
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.DeleteApply(Wx_id, Club_id, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.DeleteApply(ctx, Wx_id, Club_id, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(IRetCode, 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func createActivity(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ActivityInfo ActivityInfo
	err = ActivityInfo.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.CreateActivity(&ActivityInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.CreateActivity(ctx, &ActivityInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getActivityList(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var Batch int32
	err = _is.Read_int32(&Batch, 2, true)
	if err != nil {
		return err
	}
	var Wx_id string
	err = _is.Read_string(&Wx_id, 3, true)
	if err != nil {
		return err
	}
	var Club_id string
	err = _is.Read_string(&Club_id, 4, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ActivityList []map[string]string
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetActivityList(Index, Batch, Wx_id, Club_id, &NextIndex, &ActivityList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetActivityList(ctx, Index, Batch, Wx_id, Club_id, &NextIndex, &ActivityList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 5)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 6)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ActivityList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ActivityList {

		err = _os.WriteHead(codec.MAP, 0)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(v)), 0)
		if err != nil {
			return err
		}
		for k23, v23 := range v {

			err = _os.Write_string(k23, 0)
			if err != nil {
				return err
			}

			err = _os.Write_string(v23, 1)
			if err != nil {
				return err
			}
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func updateActivity(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ActivityIndo ActivityInfo
	err = ActivityIndo.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	var IRetCode int32
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.UpdateActivity(&ActivityIndo, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.UpdateActivity(ctx, &ActivityIndo, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(IRetCode, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func deleteActivity(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Activity_id string
	err = _is.Read_string(&Activity_id, 1, true)
	if err != nil {
		return err
	}
	var IRetCode int32
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.DeleteActivity(Activity_id, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.DeleteActivity(ctx, Activity_id, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(IRetCode, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getActivityInfo(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Activity_id string
	err = _is.Read_string(&Activity_id, 1, true)
	if err != nil {
		return err
	}
	var ActivityInfo ActivityInfo
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetActivityInfo(Activity_id, &ActivityInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetActivityInfo(ctx, Activity_id, &ActivityInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = ActivityInfo.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func createActivityRecord(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var Activity_id string
	err = _is.Read_string(&Activity_id, 2, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.CreateActivityRecord(Wx_id, Activity_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.CreateActivityRecord(ctx, Wx_id, Activity_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getActivityRecords(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var Batch int32
	err = _is.Read_int32(&Batch, 2, true)
	if err != nil {
		return err
	}
	var Activity_id string
	err = _is.Read_string(&Activity_id, 3, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var RecordList []ActivityRecord
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetActivityRecords(Index, Batch, Activity_id, &NextIndex, &RecordList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetActivityRecords(ctx, Index, Batch, Activity_id, &NextIndex, &RecordList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(RecordList)), 0)
	if err != nil {
		return err
	}
	for _, v := range RecordList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func deleteActivityRecord(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Activity_id string
	err = _is.Read_string(&Activity_id, 1, true)
	if err != nil {
		return err
	}
	var Wx_id string
	err = _is.Read_string(&Wx_id, 2, true)
	if err != nil {
		return err
	}
	var IRetCode int32
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.DeleteActivityRecord(Activity_id, Wx_id, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.DeleteActivityRecord(ctx, Activity_id, Wx_id, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(IRetCode, 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func insertMessage(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Msg Message
	err = Msg.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.InsertMessage(&Msg)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.InsertMessage(ctx, &Msg)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getMsgList(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var Date string
	err = _is.Read_string(&Date, 2, true)
	if err != nil {
		return err
	}
	var Wx_id string
	err = _is.Read_string(&Wx_id, 3, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var MsgList []Message
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetMsgList(Index, Date, Wx_id, &NextIndex, &MsgList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetMsgList(ctx, Index, Date, Wx_id, &NextIndex, &MsgList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(MsgList)), 0)
	if err != nil {
		return err
	}
	for _, v := range MsgList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func addLike(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Message_id string
	err = _is.Read_string(&Message_id, 1, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.AddLike(Message_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.AddLike(ctx, Message_id)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getLike(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Message_id string
	err = _is.Read_string(&Message_id, 1, true)
	if err != nil {
		return err
	}
	var Like_count int32
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetLike(Message_id, &Like_count)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetLike(ctx, Message_id, &Like_count)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(Like_count, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func insertData(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var STableName string
	err = _is.Read_string(&STableName, 1, true)
	if err != nil {
		return err
	}
	var SColumns []Column
	err, _, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		SColumns = make([]Column, length, length)
		for i24, e24 := int32(0), length; i24 < e24; i24++ {

			err = SColumns[i24].ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.InsertData(STableName, SColumns)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.InsertData(ctx, STableName, SColumns)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func queryData(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var STableName string
	err = _is.Read_string(&STableName, 1, true)
	if err != nil {
		return err
	}
	var SColumns []string
	err, _, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		SColumns = make([]string, length, length)
		for i25, e25 := int32(0), length; i25 < e25; i25++ {

			err = _is.Read_string(&SColumns[i25], 0, false)
			if err != nil {
				return err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}
	}
	var SCondition string
	err = _is.Read_string(&SCondition, 3, true)
	if err != nil {
		return err
	}
	var SRsp []map[string]string
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.QueryData(STableName, SColumns, SCondition, &SRsp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.QueryData(ctx, STableName, SColumns, SCondition, &SRsp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(SRsp)), 0)
	if err != nil {
		return err
	}
	for _, v := range SRsp {

		err = _os.WriteHead(codec.MAP, 0)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(v)), 0)
		if err != nil {
			return err
		}
		for k26, v26 := range v {

			err = _os.Write_string(k26, 0)
			if err != nil {
				return err
			}

			err = _os.Write_string(v26, 1)
			if err != nil {
				return err
			}
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getRecordCount(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var STableName string
	err = _is.Read_string(&STableName, 1, true)
	if err != nil {
		return err
	}
	var SCondition string
	err = _is.Read_string(&SCondition, 2, true)
	if err != nil {
		return err
	}
	var ICount int32
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetRecordCount(STableName, SCondition, &ICount)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetRecordCount(ctx, STableName, SCondition, &ICount)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(ICount, 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *DataService) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "hasUser":
		err := hasUser(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "hasPhone":
		err := hasPhone(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "createUser":
		err := createUser(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getUserInfo":
		err := getUserInfo(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getGroupInfo":
		err := getGroupInfo(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "createClubManager":
		err := createClubManager(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "createClub":
		err := createClub(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getClubList":
		err := getClubList(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getManagerClubList":
		err := getManagerClubList(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "createApply":
		err := createApply(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getApplyListByClubId":
		err := getApplyListByClubId(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getApplyListByUserId":
		err := getApplyListByUserId(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "setApplyStatus":
		err := setApplyStatus(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "deleteApply":
		err := deleteApply(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "createActivity":
		err := createActivity(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getActivityList":
		err := getActivityList(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "updateActivity":
		err := updateActivity(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "deleteActivity":
		err := deleteActivity(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getActivityInfo":
		err := getActivityInfo(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "createActivityRecord":
		err := createActivityRecord(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getActivityRecords":
		err := getActivityRecords(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "deleteActivityRecord":
		err := deleteActivityRecord(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "insertMessage":
		err := insertMessage(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getMsgList":
		err := getMsgList(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "addLike":
		err := addLike(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getLike":
		err := getLike(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "insertData":
		err := insertData(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "queryData":
		err := queryData(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getRecordCount":
		err := getRecordCount(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}
