//Package LifeService comment
// This file war generated by tars2go 1.1
// Generated from DataService.tars
package LifeService

import (
	"context"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

//DataService struct
type DataService struct {
	s m.Servant
}

//HasUser is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) HasUser(Wx_id string, SRsp *bool, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "hasUser", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_bool(&(*SRsp), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//HasUserWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) HasUserWithContext(ctx context.Context, Wx_id string, SRsp *bool, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "hasUser", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_bool(&(*SRsp), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateUser is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateUser(Wx_id string, UserInfo *UserInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = UserInfo.WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "createUser", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateUserWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateUserWithContext(ctx context.Context, Wx_id string, UserInfo *UserInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	err = UserInfo.WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "createUser", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetUserInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetUserInfo(Wx_id string, SRsp *UserInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getUserInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*SRsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetUserInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetUserInfoWithContext(ctx context.Context, Wx_id string, SRsp *UserInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getUserInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*SRsp).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetGroupInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetGroupInfo(GroupInfo *map[int32]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getGroupInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have = _is.SkipTo(codec.MAP, 1, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return ret, err
	}
	(*GroupInfo) = make(map[int32]string)
	for i0, e0 := int32(0), length; i0 < e0; i0++ {
		var k0 int32
		var v0 string

		err = _is.Read_int32(&k0, 0, false)
		if err != nil {
			return ret, err
		}

		err = _is.Read_string(&v0, 1, false)
		if err != nil {
			return ret, err
		}

		(*GroupInfo)[k0] = v0
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetGroupInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetGroupInfoWithContext(ctx context.Context, GroupInfo *map[int32]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getGroupInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have = _is.SkipTo(codec.MAP, 1, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return ret, err
	}
	(*GroupInfo) = make(map[int32]string)
	for i1, e1 := int32(0), length; i1 < e1; i1++ {
		var k1 int32
		var v1 string

		err = _is.Read_int32(&k1, 0, false)
		if err != nil {
			return ret, err
		}

		err = _is.Read_string(&v1, 1, false)
		if err != nil {
			return ret, err
		}

		(*GroupInfo)[k1] = v1
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetGroupByUserId is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetGroupByUserId(Wx_id string, Group *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getGroupByUserId", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Group), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetGroupByUserIdWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetGroupByUserIdWithContext(ctx context.Context, Wx_id string, Group *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Wx_id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getGroupByUserId", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Group), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetGroupByGroupId is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetGroupByGroupId(GroupId int32, Group *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(GroupId, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getGroupByGroupId", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Group), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetGroupByGroupIdWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetGroupByGroupIdWithContext(ctx context.Context, GroupId int32, Group *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(GroupId, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getGroupByGroupId", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*Group), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClub is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateClub(ClubInfo *ClubInfo, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ClubInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "createClub", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClubWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) CreateClubWithContext(ctx context.Context, ClubInfo *ClubInfo, IRetCode *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ClubInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "createClub", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*IRetCode), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetClubList is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetClubList(ClubInfoList *[]ClubInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(1, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = (*ClubInfoList)[i2].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetClubListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) GetClubListWithContext(ctx context.Context, ClubInfoList *[]ClubInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(1, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = (*ClubInfoList)[i3].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InsertData is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) InsertData(STableName string, SColumns []Column, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SColumns)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range SColumns {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "insertData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InsertDataWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) InsertDataWithContext(ctx context.Context, STableName string, SColumns []Column, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SColumns)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range SColumns {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "insertData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryData is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) QueryData(STableName string, SColumns []string, SCondition string, SRsp *[]map[string]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SColumns)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range SColumns {

		err = _os.Write_string(v, 0)
		if err != nil {
			return ret, err
		}
	}

	err = _os.Write_string(SCondition, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "queryData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*SRsp) = make([]map[string]string, length, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err, have = _is.SkipTo(codec.MAP, 0, false)
			if err != nil {
				return ret, err
			}
			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return ret, err
				}
				(*SRsp)[i4] = make(map[string]string)
				for i5, e5 := int32(0), length; i5 < e5; i5++ {
					var k5 string
					var v5 string

					err = _is.Read_string(&k5, 0, false)
					if err != nil {
						return ret, err
					}

					err = _is.Read_string(&v5, 1, false)
					if err != nil {
						return ret, err
					}

					(*SRsp)[i4][k5] = v5
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDataWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *DataService) QueryDataWithContext(ctx context.Context, STableName string, SColumns []string, SCondition string, SRsp *[]map[string]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(STableName, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SColumns)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range SColumns {

		err = _os.Write_string(v, 0)
		if err != nil {
			return ret, err
		}
	}

	err = _os.Write_string(SCondition, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "queryData", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*SRsp) = make([]map[string]string, length, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err, have = _is.SkipTo(codec.MAP, 0, false)
			if err != nil {
				return ret, err
			}
			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return ret, err
				}
				(*SRsp)[i6] = make(map[string]string)
				for i7, e7 := int32(0), length; i7 < e7; i7++ {
					var k7 string
					var v7 string

					err = _is.Read_string(&k7, 0, false)
					if err != nil {
						return ret, err
					}

					err = _is.Read_string(&v7, 1, false)
					if err != nil {
						return ret, err
					}

					(*SRsp)[i6][k7] = v7
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *DataService) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *DataService) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}
func (_obj *DataService) setMap(l int, res *requestf.ResponsePacket, ctx map[string]string, sts map[string]string) {
	if l == 1 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
	} else if l == 2 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
		for k, _ := range sts {
			delete(sts, k)
		}
		for k, v := range res.Status {
			sts[k] = v
		}
	}
}

//AddServant adds servant  for the service.
func (_obj *DataService) AddServant(imp _impDataService, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *DataService) AddServantWithContext(imp _impDataServiceWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impDataService interface {
	HasUser(Wx_id string, SRsp *bool) (ret int32, err error)
	CreateUser(Wx_id string, UserInfo *UserInfo) (ret int32, err error)
	GetUserInfo(Wx_id string, SRsp *UserInfo) (ret int32, err error)
	GetGroupInfo(GroupInfo *map[int32]string) (ret int32, err error)
	GetGroupByUserId(Wx_id string, Group *string) (ret int32, err error)
	GetGroupByGroupId(GroupId int32, Group *string) (ret int32, err error)
	CreateClub(ClubInfo *ClubInfo, IRetCode *int32) (ret int32, err error)
	GetClubList(ClubInfoList *[]ClubInfo) (ret int32, err error)
	InsertData(STableName string, SColumns []Column) (ret int32, err error)
	QueryData(STableName string, SColumns []string, SCondition string, SRsp *[]map[string]string) (ret int32, err error)
}
type _impDataServiceWithContext interface {
	HasUser(ctx context.Context, Wx_id string, SRsp *bool) (ret int32, err error)
	CreateUser(ctx context.Context, Wx_id string, UserInfo *UserInfo) (ret int32, err error)
	GetUserInfo(ctx context.Context, Wx_id string, SRsp *UserInfo) (ret int32, err error)
	GetGroupInfo(ctx context.Context, GroupInfo *map[int32]string) (ret int32, err error)
	GetGroupByUserId(ctx context.Context, Wx_id string, Group *string) (ret int32, err error)
	GetGroupByGroupId(ctx context.Context, GroupId int32, Group *string) (ret int32, err error)
	CreateClub(ctx context.Context, ClubInfo *ClubInfo, IRetCode *int32) (ret int32, err error)
	GetClubList(ctx context.Context, ClubInfoList *[]ClubInfo) (ret int32, err error)
	InsertData(ctx context.Context, STableName string, SColumns []Column) (ret int32, err error)
	QueryData(ctx context.Context, STableName string, SColumns []string, SCondition string, SRsp *[]map[string]string) (ret int32, err error)
}

func hasUser(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var SRsp bool
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.HasUser(Wx_id, &SRsp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.HasUser(ctx, Wx_id, &SRsp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_bool(SRsp, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func createUser(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var UserInfo UserInfo
	err = UserInfo.ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.CreateUser(Wx_id, &UserInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.CreateUser(ctx, Wx_id, &UserInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getUserInfo(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var SRsp UserInfo
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetUserInfo(Wx_id, &SRsp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetUserInfo(ctx, Wx_id, &SRsp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = SRsp.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getGroupInfo(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var GroupInfo map[int32]string
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetGroupInfo(&GroupInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetGroupInfo(ctx, &GroupInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(GroupInfo)), 0)
	if err != nil {
		return err
	}
	for k8, v8 := range GroupInfo {

		err = _os.Write_int32(k8, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v8, 1)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getGroupByUserId(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Wx_id string
	err = _is.Read_string(&Wx_id, 1, true)
	if err != nil {
		return err
	}
	var Group string
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetGroupByUserId(Wx_id, &Group)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetGroupByUserId(ctx, Wx_id, &Group)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_string(Group, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getGroupByGroupId(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var GroupId int32
	err = _is.Read_int32(&GroupId, 1, true)
	if err != nil {
		return err
	}
	var Group string
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetGroupByGroupId(GroupId, &Group)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetGroupByGroupId(ctx, GroupId, &Group)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_string(Group, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func createClub(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ClubInfo ClubInfo
	err = ClubInfo.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	var IRetCode int32
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.CreateClub(&ClubInfo, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.CreateClub(ctx, &ClubInfo, &IRetCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(IRetCode, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func getClubList(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ClubInfoList []ClubInfo
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.GetClubList(&ClubInfoList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.GetClubList(ctx, &ClubInfoList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ClubInfoList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ClubInfoList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func insertData(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var STableName string
	err = _is.Read_string(&STableName, 1, true)
	if err != nil {
		return err
	}
	var SColumns []Column
	err, _, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		SColumns = make([]Column, length, length)
		for i9, e9 := int32(0), length; i9 < e9; i9++ {

			err = SColumns[i9].ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}
	}
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.InsertData(STableName, SColumns)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.InsertData(ctx, STableName, SColumns)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func queryData(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var STableName string
	err = _is.Read_string(&STableName, 1, true)
	if err != nil {
		return err
	}
	var SColumns []string
	err, _, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		SColumns = make([]string, length, length)
		for i10, e10 := int32(0), length; i10 < e10; i10++ {

			err = _is.Read_string(&SColumns[i10], 0, false)
			if err != nil {
				return err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}
	}
	var SCondition string
	err = _is.Read_string(&SCondition, 3, true)
	if err != nil {
		return err
	}
	var SRsp []map[string]string
	if withContext == false {
		_imp := _val.(_impDataService)
		ret, err := _imp.QueryData(STableName, SColumns, SCondition, &SRsp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impDataServiceWithContext)
		ret, err := _imp.QueryData(ctx, STableName, SColumns, SCondition, &SRsp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(SRsp)), 0)
	if err != nil {
		return err
	}
	for _, v := range SRsp {

		err = _os.WriteHead(codec.MAP, 0)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(v)), 0)
		if err != nil {
			return err
		}
		for k11, v11 := range v {

			err = _os.Write_string(k11, 0)
			if err != nil {
				return err
			}

			err = _os.Write_string(v11, 1)
			if err != nil {
				return err
			}
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *DataService) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "hasUser":
		err := hasUser(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "createUser":
		err := createUser(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getUserInfo":
		err := getUserInfo(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getGroupInfo":
		err := getGroupInfo(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getGroupByUserId":
		err := getGroupByUserId(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getGroupByGroupId":
		err := getGroupByGroupId(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "createClub":
		err := createClub(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "getClubList":
		err := getClubList(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "insertData":
		err := insertData(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "queryData":
		err := queryData(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}
