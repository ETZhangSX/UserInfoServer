//Package LifeService comment
// This file war generated by tars2go 1.1
// Generated from DataService.tars
package LifeService

import (
	"fmt"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

//ActivityInfo strcut implement
type ActivityInfo struct {
	Activity_id         string `json:"activity_id"`
	Name                string `json:"name"`
	Sponsor             string `json:"sponsor"`
	Club_id             string `json:"club_id"`
	Target_id           string `json:"target_id"`
	Create_time         string `json:"create_time"`
	Start_time          string `json:"start_time"`
	Stop_time           string `json:"stop_time"`
	Registry_start_time string `json:"registry_start_time"`
	Registry_stop_time  string `json:"registry_stop_time"`
	Content             string `json:"content"`
}

func (st *ActivityInfo) resetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *ActivityInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.resetDefault()

	err = _is.Read_string(&st.Activity_id, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Name, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Sponsor, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Club_id, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Target_id, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Create_time, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Start_time, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Stop_time, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Registry_start_time, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Registry_stop_time, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Content, 10, false)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ActivityInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.resetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ActivityInfo, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ActivityInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Activity_id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Sponsor, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Club_id, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Target_id, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Create_time, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Start_time, 6)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Stop_time, 7)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Registry_start_time, 8)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Registry_stop_time, 9)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Content, 10)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *ActivityInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
