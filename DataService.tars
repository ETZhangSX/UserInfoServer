module LifeService
{
    struct UserInfo
    {
        0 require string name;
        1 require string phone;
        2 require string gender;
        3 require string avatar_url;
        4 require string registration_time;
        5 require int    group;
    };
    
    struct Column
    {
        0 require string columnName;
        1 require bool   DBInt;
        2 require string columnValue;
    };

    struct ClubInfo
    {
        0 require string club_id;
        1 require string name;
        2 require string chairman;
        3 require string create_time;
        4 require string introduction;
    };

    struct ActivityInfo
    {
        0  require  string activity_id;
        1  require  string name;
        2  require  string sponsor;
        3  require  string club_id;
        4  optional string target_id;
        5  optional string create_time;
        6  optional string start_time;
        7  optional string stop_time;
        8  optional string registry_start_time;
        9  optional string registry_stop_time;
        10 optional string content; 
    };

    struct Message
    {
        0 require  string message_id;
        1 require  string user_id;
        2 require  string content;
        3 require  bool   anonymous;
        4 require  string message_time;
        5 optional int    like_count;
    };
    
    interface DataService
    {
        int hasUser(string wx_id, out bool sRsp);
        int createUser(string wx_id, UserInfo UserInfo);
        int getUserInfo(string wx_id, out UserInfo sRsp);
        int getGroupInfo(out map<int, string> groupInfo);
        int getGroupByUserId(string wx_id, out string group);
        int getGroupByGroupId(int groupId, out string group);

        int createClub(ClubInfo clubInfo, out int iRetCode);
        int getClubList(out vector<ClubInfo> clubInfoList);

        // int createActivity(ActivityInfo activityInfo, out int iRetCode);
        int getActivityList(int index, out int nextIndex, out vector<map<string, string>> activityList);
        // int getActivityDetail(string activityId, out ActivityInfo activityInfo);

        int insertMessage(Message msg);
        int getMsgList(int index, string date, string wx_id, out int nextIndex, out vector<Message> msgList);
        int addLike(string message_id);
        int getLike(string message_id, out int like_count);

        int insertData(string sTableName, vector<Column> sColumns);
        int queryData(string sTableName, vector<string> sColumns, string sCondition, out vector<map<string, string>> sRsp);
        int getRecordCount(string sTableName, string sCondition, out int iCount);
    };

}; 
